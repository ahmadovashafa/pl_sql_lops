Tasks PL/SQL Loops
1.Task: Write a simple loop that prints numbers from 1 to 5.

DECLARE
    v_counter NUMBER := 1;
begin
    while v_counter <= 5 loop
        DBMS_OUTPUT.PUT_LINE(v_counter);
        v_counter := v_counter + 1;
    end loop;
END;

2.Task: Use a FOR loop to print numbers from 1 to 10.

BEGIN
  for v_num IN 1..10 LOOP
     DBMS_OUTPUT.PUT_LINE(v_num);
  END LOOP;
END;

3.Task: Utilize a WHILE loop to print numbers from 10 down to 1.

   DECLARE
      v_num NUMBER := 10;
   begin
      while v_num >= 1 LOOP
         DBMS_OUTPUT.PUT_LINE(v_num);
         v_num := v_num - 1;
      end loop;
   END;


4.Task: Create nested loops to print a pattern of numbers.


 BEGIN
  FOR i IN 1..3 LOOP
     for j IN 1..3 LOOP
        DBMS_OUTPUT.PUT_LINE(i || ', ' || j);
     end loop;
  END LOOP;
END;

5.Task: Write a loop that prints numbers from 1 to 5 but uses the EXIT command to break out of the loop when the counter reaches 3.


DECLARE
   v_num NUMBER := 1;
BEGIN
  LOOP
     if v_num > 3 THEN
        exit;
     END IF;
     DBMS_OUTPUT.PUT_LINE(v_num);
     v_num := v_num + 1;
  END LOOP;
END;

6.Task: Assume you have a fictional employees table. Use a cursor FOR loop to print the names of all employees.

DECLARE
  CURSOR emp_cur IS SELECT first_name FROM employees;
BEGIN
  for rec IN emp_cur LOOP
     DBMS_OUTPUT.PUT_LINE(rec.first_name);
  END LOOP;
END;

7.Task: You have two arrays v_ids and v_names with 5 elements each. Use the FORALL statement to bulk insert these elements into a fictional users table.

8.Task: Write a loop that prints numbers from 1 to 5, but skips the number 3 using the CONTINUE command.
BEGIN
  FOR i IN 1..5 LOOP
     if i = 3 THEN
        continue;
     END IF;
     DBMS_OUTPUT.PUT_LINE(i);
  END LOOP;
END;

9.Task: Create a loop that starts with a variable set to 10 and decrements it, printing out its value, until it's less than 5.

DECLARE
   v_counter NUMBER := 10;
BEGIN
  LOOP
     DBMS_OUTPUT.PUT_LINE(v_counter);
     v_counter := v_counter - 1;
     if v_counter < 5 THEN
        EXIT;
     END IF;
  END LOOP;
END;


10.Task: Assume a fictional table orders has a status column. Use a WHILE loop to continuously check the first order's status until it changes to 'SHIPPED'.


DECLARE
   v_status VARCHAR2(50);
BEGIN
  SELECT status INTO v_status FROM orders WHERE ROWNUM = 1;
  while v_status <> 'SHIPPED' LOOP
     DBMS_OUTPUT.PUT_LINE('Waiting for shipment...');
     DBMS_SESSION.SLEEP(3); -- Let's assume this is a sleep function to wait for 3 seconds
     SELECT status INTO v_status FROM orders WHERE ROWNUM = 1;
  END LOOP;
END;
